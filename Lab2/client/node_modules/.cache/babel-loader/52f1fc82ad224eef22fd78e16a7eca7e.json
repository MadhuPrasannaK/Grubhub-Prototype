{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _lodash = require('lodash.isfunction');\n\nvar _lodash2 = _interopRequireDefault(_lodash);\n\nvar _lodash3 = require('lodash.isobject');\n\nvar _lodash4 = _interopRequireDefault(_lodash3);\n\nvar _actions = require('./actions');\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction swallow() {}\n\nfunction warnAboutConfusingFiltering(blacklist, whitelist) {\n  blacklist.filter(function (item) {\n    return whitelist.indexOf(item) !== -1;\n  }).forEach(function (item) {\n    console.warn( // eslint-disable-line no-console\n    '[redux-storage] Action ' + item + ' is on BOTH black- and whitelist.' + ' This is most likely a mistake!');\n  });\n}\n\nfunction isValidAction(action) {\n  var isFunc = (0, _lodash2['default'])(action);\n  var isObj = (0, _lodash4['default'])(action);\n  var hasType = isObj && action.hasOwnProperty('type');\n\n  if (!isFunc && isObj && hasType) {\n    return true;\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (isFunc) {\n      console.warn( // eslint-disable-line no-console\n      '[redux-storage] ACTION IGNORED! Actions should be objects' + ' with a type property but received a function! Your' + ' function resolving middleware (e.g. redux-thunk) must be' + ' placed BEFORE redux-storage!');\n    } else if (!isObj) {\n      console.warn( // eslint-disable-line no-console\n      '[redux-storage] ACTION IGNORED! Actions should be objects' + (' with a type property but received: ' + action));\n    } else if (!hasType) {\n      console.warn( // eslint-disable-line no-console\n      '[redux-storage] ACTION IGNORED! Action objects should have' + ' a type property.');\n    }\n  }\n\n  return false;\n}\n\nfunction handleWhitelist(action, actionWhitelist) {\n  if (Array.isArray(actionWhitelist)) {\n    return actionWhitelist.length === 0 ? true // Don't filter if the whitelist is empty\n    : actionWhitelist.indexOf(action.type) !== -1;\n  } // actionWhitelist is a function that returns true or false\n\n\n  return actionWhitelist(action);\n}\n\nexports['default'] = function (engine) {\n  var actionBlacklist = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var actionWhitelist = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : []; // Also don't save if we process our own actions\n\n  var blacklistedActions = [].concat(_toConsumableArray(actionBlacklist), [_constants.LOAD, _constants.SAVE]);\n\n  if (process.env.NODE_ENV !== 'production' && Array.isArray(actionWhitelist)) {\n    warnAboutConfusingFiltering(actionBlacklist, actionWhitelist);\n  }\n\n  return function (_ref) {\n    var dispatch = _ref.dispatch,\n        getState = _ref.getState;\n    return function (next) {\n      return function (action) {\n        var result = next(action);\n\n        if (!isValidAction(action)) {\n          return result;\n        }\n\n        var isOnBlacklist = blacklistedActions.indexOf(action.type) !== -1;\n        var isOnWhitelist = handleWhitelist(action, actionWhitelist); // Skip blacklisted actions\n\n        if (!isOnBlacklist && isOnWhitelist) {\n          (function () {\n            var saveState = getState();\n            var saveAction = (0, _actions.save)(saveState);\n\n            if (process.env.NODE_ENV !== 'production') {\n              if (!saveAction.meta) {\n                saveAction.meta = {};\n              }\n\n              saveAction.meta.origin = action;\n            }\n\n            var dispatchSave = function dispatchSave() {\n              return dispatch(saveAction);\n            };\n\n            engine.save(saveState).then(dispatchSave)['catch'](swallow);\n          })();\n        }\n\n        return result;\n      };\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"script"}