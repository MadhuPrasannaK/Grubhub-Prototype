{"ast":null,"code":"import { createStore, applyMiddleware, compose } from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport thunk from \"redux-thunk\";\nimport axios from \"axios\";\nimport cookie from \"js-cookie\";\nimport * as storage from 'redux-storage';\nimport createEngine from 'redux-storage-engine-localstorage';\naxios.interceptors.request.use(config => {\n  const token = cookie.get('token');\n\n  if (token) {\n    config.headers.Authorization = \"JWT \".concat(token);\n  }\n\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\naxios.interceptors.response.use(response => {\n  return response;\n}, error => {\n  return Promise.reject(error);\n});\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducer = storage.reducer(rootReducer);\nconst engine = createEngine('current-session-key');\nconst middleware = storage.createMiddleware(engine);\nconst store = createStore(reducer, storeEnhancers(applyMiddleware(thunk, middleware)));\nconst load = storage.createLoader(engine);\nload(store).then(newState => console.log(\"Loaded state:\", newState)).catch(() => console.log(\"Failed to load previous state\"));\nexport default store;","map":{"version":3,"sources":["/Users/admin/Desktop/Lab2-013708071/Lab2/client/src/js/store/index.js"],"names":["createStore","applyMiddleware","compose","rootReducer","thunk","axios","cookie","storage","createEngine","interceptors","request","use","config","token","get","headers","Authorization","error","Promise","reject","response","storeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","reducer","engine","middleware","createMiddleware","store","load","createLoader","then","newState","console","log","catch"],"mappings":"AAAA,SACIA,WADJ,EAEIC,eAFJ,EAGIC,OAHJ,QAIO,OAJP;AAKA,OAAOC,WAAP,MAAwB,mBAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AACA,OAAO,KAAKC,OAAZ,MAAyB,eAAzB;AACA,OAAOC,YAAP,MAAyB,mCAAzB;AAGAH,KAAK,CAACI,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAAgCC,MAAD,IAAY;AACvC,QAAMC,KAAK,GAAGP,MAAM,CAACQ,GAAP,CAAW,OAAX,CAAd;;AACA,MAAID,KAAJ,EAAW;AACPD,IAAAA,MAAM,CAACG,OAAP,CAAeC,aAAf,iBAAsCH,KAAtC;AACH;;AACD,SAAOD,MAAP;AACH,CAND,EAMIK,KAAD,IAAW;AACV,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CARD;AAUAZ,KAAK,CAACI,YAAN,CAAmBW,QAAnB,CAA4BT,GAA5B,CAAgCS,QAAQ,IAAI;AACpC,SAAOA,QAAP;AACH,CAFL,EAGIH,KAAK,IAAI;AACL,SAAOC,OAAO,CAACC,MAAR,CAAeF,KAAf,CAAP;AACH,CALL;AAOA,MAAMI,cAAc,GAAGC,MAAM,CAACC,oCAAP,IAA+CrB,OAAtE;AACA,MAAMsB,OAAO,GAAGjB,OAAO,CAACiB,OAAR,CAAgBrB,WAAhB,CAAhB;AACA,MAAMsB,MAAM,GAAGjB,YAAY,CAAC,qBAAD,CAA3B;AACA,MAAMkB,UAAU,GAAGnB,OAAO,CAACoB,gBAAR,CAAyBF,MAAzB,CAAnB;AACA,MAAMG,KAAK,GAAG5B,WAAW,CAACwB,OAAD,EAAUH,cAAc,CAACpB,eAAe,CAACG,KAAD,EAAQsB,UAAR,CAAhB,CAAxB,CAAzB;AACA,MAAMG,IAAI,GAAGtB,OAAO,CAACuB,YAAR,CAAqBL,MAArB,CAAb;AACAI,IAAI,CAACD,KAAD,CAAJ,CAAYG,IAAZ,CAAiBC,QAAQ,IACrBC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,QAA7B,CADJ,EAEKG,KAFL,CAEW,MAAMF,OAAO,CAACC,GAAR,CAAY,+BAAZ,CAFjB;AAGA,eAAeN,KAAf","sourcesContent":["import {\n    createStore,\n    applyMiddleware,\n    compose\n} from \"redux\";\nimport rootReducer from \"../reducers/index\";\nimport thunk from \"redux-thunk\";\nimport axios from \"axios\";\nimport cookie from \"js-cookie\";\nimport * as storage from 'redux-storage';\nimport createEngine from 'redux-storage-engine-localstorage';\n\n\naxios.interceptors.request.use((config) => {\n    const token = cookie.get('token');\n    if (token) {\n        config.headers.Authorization = `JWT ${token}`;\n    }\n    return config;\n}, (error) => {\n    return Promise.reject(error);\n});\n\naxios.interceptors.response.use(response => {\n        return response\n    },\n    error => {\n        return Promise.reject(error)\n    })\n\nconst storeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst reducer = storage.reducer(rootReducer);\nconst engine = createEngine('current-session-key');\nconst middleware = storage.createMiddleware(engine);\nconst store = createStore(reducer, storeEnhancers(applyMiddleware(thunk, middleware)));\nconst load = storage.createLoader(engine);\nload(store).then(newState =>\n    console.log(\"Loaded state:\", newState))\n    .catch(() => console.log(\"Failed to load previous state\"))\nexport default store;"]},"metadata":{},"sourceType":"module"}