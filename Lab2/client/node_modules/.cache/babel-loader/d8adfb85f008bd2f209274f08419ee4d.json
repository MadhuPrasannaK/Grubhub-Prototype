{"ast":null,"code":"import actionTypes from \"../constants/index\";\nimport axios from \"axios\";\nimport cookie from \"js-cookie\";\nimport { toast } from \"react-toastify\";\n\nconst loginUser = (payload, ownProps) => {\n  return dispatch => {\n    return axios.post(\"http://localhost:3001/login\", payload).then(response => {\n      if (response.status === 200) {\n        const userData = response.data;\n        cookie.set(\"token\", userData.token, {\n          expires: 1\n        });\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: userData\n        });\n\n        if (userData.account_type === \"Vendor\") {\n          ownProps.history.push(\"/\".concat(userData._id, \"/profile\"));\n        } else {\n          ownProps.history.push(\"/\".concat(userData._id, \"/search\"));\n        }\n      }\n    }).catch(err => {\n      console.log(\"Login error:\", err);\n      toast.error(\"User not found! Try creating an account?\");\n    });\n  };\n};\n\nconst registerUser = (payload, ownProps) => {\n  return dispatch => {\n    return axios.post(\"http://localhost:3001/register\", payload).then(response => {\n      if (response.status === 200) {\n        const userData = response.data;\n        cookie.set(\"token\", userData.token, {\n          expires: 1\n        });\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: userData\n        });\n\n        if (userData.account_type === \"Vendor\") {\n          ownProps.history.push(\"/login-vendor\");\n        } else {\n          ownProps.history.push(\"/login-user\");\n        }\n      }\n    });\n  };\n};\n\nconst updateUser = payload => {\n  return dispatch => {\n    return axios.put(\"http://localhost:3001/userUpdate/\".concat(payload._id), payload).then(response => {\n      if (response.status === 200) {\n        const userData = response.data.user;\n        userData.update_success = true;\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: userData\n        });\n\n        if (userData.account_type === \"Vendor\") {\n          const restaurantData = response.data.restaurant;\n          dispatch({\n            type: actionTypes.SET_RESTAURANT,\n            payload: restaurantData\n          });\n        }\n\n        toast.success(\"Successfully updated data!\");\n      }\n    });\n  };\n};\n\nconst getUser = payload => {\n  return dispatch => {\n    return axios.get(\"http://localhost:3001/user/\".concat(payload.user_id)).then(response => {\n      if (response.status === 200) {\n        const userData = response.data;\n        dispatch({\n          type: actionTypes.SET_USER,\n          payload: userData\n        });\n      }\n    });\n  };\n};\n\nconst uploadProfileImage = payload => {\n  return dispatch => {\n    return axios.post(\"http://localhost:3001/upload/image\", payload).then(response => {\n      if (response.status === 200) {\n        dispatch({\n          type: actionTypes.SET_PROFILE_PIC,\n          payload: response.data\n        });\n      }\n    });\n  };\n};\n\nexport { registerUser, loginUser, updateUser, getUser, uploadProfileImage };","map":{"version":3,"sources":["/Users/admin/Downloads/Lab2-013708071/Lab2/client/src/js/actions/userActions.js"],"names":["actionTypes","axios","cookie","toast","loginUser","payload","ownProps","dispatch","post","then","response","status","userData","data","set","token","expires","type","SET_USER","account_type","history","push","_id","catch","err","console","log","error","registerUser","updateUser","put","user","update_success","restaurantData","restaurant","SET_RESTAURANT","success","getUser","get","user_id","uploadProfileImage","SET_PROFILE_PIC"],"mappings":"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","sourcesContent":["import actionTypes from \"../constants/index\";\nimport axios from \"axios\";\nimport cookie from \"js-cookie\";\nimport {\n    toast\n} from \"react-toastify\";\n\n\nconst loginUser = (payload, ownProps) => {\n    return dispatch => {\n        return axios.post(\"http://localhost:3001/login\", payload).then(response => {\n            if (response.status === 200) {\n                const userData = response.data;\n                cookie.set(\"token\", userData.token, {\n                    expires: 1\n                })\n                dispatch({\n                    type: actionTypes.SET_USER,\n                    payload: userData\n                });\n                if (userData.account_type === \"Vendor\") {\n                    ownProps.history.push(`/${userData._id}/profile`);\n                } else {\n                    ownProps.history.push(`/${userData._id}/search`);\n                }\n            }\n        }).catch(err => {\n            console.log(\"Login error:\", err)\n            toast.error(\"User not found! Try creating an account?\");\n        });\n    }\n}\n\nconst registerUser = (payload, ownProps) => {\n    return dispatch => {\n        return axios.post(\"http://localhost:3001/register\", payload).then(response => {\n            if (response.status === 200) {\n                const userData = response.data;\n                cookie.set(\"token\", userData.token, {\n                    expires: 1\n                })\n                dispatch({\n                    type: actionTypes.SET_USER,\n                    payload: userData\n                });\n                if (userData.account_type === \"Vendor\") {\n                    ownProps.history.push(`/login-vendor`);\n                } else {\n                    ownProps.history.push(`/login-user`);\n                }\n            }\n        });\n    };\n};\n\nconst updateUser = payload => {\n    return dispatch => {\n        return axios.put(`http://localhost:3001/userUpdate/${payload._id}`, payload)\n            .then(response => {\n                if (response.status === 200) {\n                    const userData = response.data.user;\n\n                    userData.update_success = true;\n                    dispatch({\n                        type: actionTypes.SET_USER,\n                        payload: userData\n                    });\n                    if (userData.account_type === \"Vendor\") {\n                        const restaurantData = response.data.restaurant;\n                        dispatch({\n                            type: actionTypes.SET_RESTAURANT,\n                            payload: restaurantData\n                        });\n                    }\n                    toast.success(\"Successfully updated data!\")\n                }\n            })\n    }\n}\n\nconst getUser = payload => {\n    return dispatch => {\n        return axios.get(`http://localhost:3001/user/${payload.user_id}`)\n            .then(response => {\n                if (response.status === 200) {\n                    const userData = response.data;\n                    dispatch({\n                        type: actionTypes.SET_USER,\n                        payload: userData\n                    })\n                }\n            })\n    }\n}\n\nconst uploadProfileImage = payload => {\n    return dispatch => {\n        return axios.post(`http://localhost:3001/upload/image`, payload).then(response => {\n            if (response.status === 200) {\n                dispatch({\n                    type: actionTypes.SET_PROFILE_PIC,\n                    payload: response.data\n                })\n            }\n        })\n    }\n}\n\nexport {\n    registerUser,\n    loginUser,\n    updateUser,\n    getUser,\n    uploadProfileImage\n};"]},"metadata":{},"sourceType":"module"}